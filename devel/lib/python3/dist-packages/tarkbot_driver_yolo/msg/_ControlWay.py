# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tarkbot_driver_yolo/ControlWay.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ControlWay(genpy.Message):
  _md5sum = "8c848fda070f270966c6dcd98dd08d58"
  _type = "tarkbot_driver_yolo/ControlWay"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 mask_x_left

float32 mask_x_right

float32 mask_y_top

float32 mask_y_bot

float32 center_target

float32 vel_x

float32 vel_y_P

float32 vel_y_D

float32 vel_z_P

float32 vel_z_D

int8 en
"""
  __slots__ = ['mask_x_left','mask_x_right','mask_y_top','mask_y_bot','center_target','vel_x','vel_y_P','vel_y_D','vel_z_P','vel_z_D','en']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mask_x_left,mask_x_right,mask_y_top,mask_y_bot,center_target,vel_x,vel_y_P,vel_y_D,vel_z_P,vel_z_D,en

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlWay, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mask_x_left is None:
        self.mask_x_left = 0.
      if self.mask_x_right is None:
        self.mask_x_right = 0.
      if self.mask_y_top is None:
        self.mask_y_top = 0.
      if self.mask_y_bot is None:
        self.mask_y_bot = 0.
      if self.center_target is None:
        self.center_target = 0.
      if self.vel_x is None:
        self.vel_x = 0.
      if self.vel_y_P is None:
        self.vel_y_P = 0.
      if self.vel_y_D is None:
        self.vel_y_D = 0.
      if self.vel_z_P is None:
        self.vel_z_P = 0.
      if self.vel_z_D is None:
        self.vel_z_D = 0.
      if self.en is None:
        self.en = 0
    else:
      self.mask_x_left = 0.
      self.mask_x_right = 0.
      self.mask_y_top = 0.
      self.mask_y_bot = 0.
      self.center_target = 0.
      self.vel_x = 0.
      self.vel_y_P = 0.
      self.vel_y_D = 0.
      self.vel_z_P = 0.
      self.vel_z_D = 0.
      self.en = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10fb().pack(_x.mask_x_left, _x.mask_x_right, _x.mask_y_top, _x.mask_y_bot, _x.center_target, _x.vel_x, _x.vel_y_P, _x.vel_y_D, _x.vel_z_P, _x.vel_z_D, _x.en))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.mask_x_left, _x.mask_x_right, _x.mask_y_top, _x.mask_y_bot, _x.center_target, _x.vel_x, _x.vel_y_P, _x.vel_y_D, _x.vel_z_P, _x.vel_z_D, _x.en,) = _get_struct_10fb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10fb().pack(_x.mask_x_left, _x.mask_x_right, _x.mask_y_top, _x.mask_y_bot, _x.center_target, _x.vel_x, _x.vel_y_P, _x.vel_y_D, _x.vel_z_P, _x.vel_z_D, _x.en))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.mask_x_left, _x.mask_x_right, _x.mask_y_top, _x.mask_y_bot, _x.center_target, _x.vel_x, _x.vel_y_P, _x.vel_y_D, _x.vel_z_P, _x.vel_z_D, _x.en,) = _get_struct_10fb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10fb = None
def _get_struct_10fb():
    global _struct_10fb
    if _struct_10fb is None:
        _struct_10fb = struct.Struct("<10fb")
    return _struct_10fb
